package org.zerock.repository;

import java.time.LocalDate;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.annotation.Commit;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.zerock.entity.TodoEntity;


@DataJpaTest //  JPA와 관련된 컴포넌트만 로드하여 테스트

@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
// 임베디드 데이터베이스(H2) 대신 실제 데이터베이스를(Maria DB) 사용하도록 설정
// -> NONE으로 설정안하면 H2 DB로 연결

@Transactional(propagation = Propagation.NOT_SUPPORTED)
// 테스트 메서드에서 트랜잭션을 비활성화(트랜잭션 없이 테스트가 실행)

public class TodoRepositoryTests {

	@Autowired
	private TodoRepository todoRepository;
	
	/**
	 * 
	 */
//	@Test
	public void test1() {
		System.out.println(todoRepository.getClass().getName());
		// jdk.proxy2.$Proxy109
		// TodoRepository 인터페이스를 Proxy가 구현
	}
	
	/**
	 *  샘플 데이터 100개 삽입 테스트
	 */
//	@Test
	public void testInsert() {
		for(int i=0 ; i<100 ; i++) {
			TodoEntity entity = TodoEntity.builder()
								.title("Test" + i)
								.writer("user" + i)
								.dueDate(LocalDate.now())
								.build();
			
			todoRepository.save(entity);
			
			System.out.println(entity);
		}
	}
	
	// @Transactional이 없을 때 : 같은 SQL있어도 구분 없이 SELECT가 모두 수행됨 (SELECT 2회 수행)
	// -> 클래스 레벨 @Transactional에 Propagation.NOT_SUPPORTED가 선언되어 있어
	//    SQL 수행 될 때 마다 트랜잭션이 닫혀 이전 SQL 내용이 기억되지 않음
	
	
	// @Transactional이 있을 때 : 같은 SQL이 있으면 중복되는 SQL을 추가 수행하지 않음(SELECT 1회 수행)
	// -> 메서드 레벨에 @Transactional 작성 시 
	//    첫 번째 SELECT시 DB에서 조회한 결과가 트랜잭션에 저장됨
	//    두 번째 SELECT시 DB에서 조회하는게 아닌 트랜잭션에 저장된 이전 SQL 결과를 읽어옴
	
	// ** Dirty Checking **
	//
	
	@Test
	@Transactional
	@Commit
	public void testRead() {
		Long tno = 54L;
		
		// todoRepository.findById(tno) : PK가 일치하는 행을 조회
		java.util.Optional<TodoEntity> result = todoRepository.findById(tno);
		System.out.println(result.get());
		
		System.out.println("--------------------------------------------------");
		
		java.util.Optional<TodoEntity> result2 = todoRepository.findById(tno);
		System.out.println(result2.get());
		
	}
}
