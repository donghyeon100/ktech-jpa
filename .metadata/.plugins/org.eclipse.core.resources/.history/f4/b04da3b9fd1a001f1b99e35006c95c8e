package org.zerock.repository.search;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;
import org.zerock.dto.TodoDTO;
import org.zerock.entity.QTodoEntity;
import org.zerock.entity.TodoEntity;

import com.querydsl.core.types.Projections;
import com.querydsl.jpa.JPQLQuery;

import lombok.extern.log4j.Log4j2;

// QuerydslRepositorySupport : 페이징, 검색을 간단히 처리할 수 있음

@Log4j2
public class TodoSearchImpl extends QuerydslRepositorySupport implements TodoSearch {

	
	public TodoSearchImpl() {
		// 도메인 클래스를 부모(QuerydslRepositorySupport) 생성자 파라미터로 전달
		super(TodoEntity.class);
	}
	
	
	//Querydsl을 사용하여 TodoEntity에 대한 페이지네이션된 쿼리를 생성
	@Override
	public Page<TodoDTO> listSearch(Pageable pageable) {
		
		
		QTodoEntity todoEntity = QTodoEntity.todoEntity;
		
		// 메서드를 이용해서 SQL을 생성
		JPQLQuery<TodoEntity> query = from(todoEntity);
		
		query.where(todoEntity.tno.gt(0)); // == where tno > 0  (인덱스 사용을 위해)
		
		this.getQuerydsl().applyPagination(pageable, query); 
		
		log.info(query);
		// from TodoEntity todoEntity
		// where todoEntity.tno > ?1
		
		// todoEntity의 select 결과를 TodoDTO 형태로 변경(전파)
		// (이 때, TodoDTO의 생성자를 사용)
		JPQLQuery<TodoDTO> dtoQuery = query.select(Projections.constructor(TodoDTO.class, todoEntity));
		
		
		List<TodoDTO> list = dtoQuery.fetch(); 
		long count = dtoQuery.fetchCount();
		
		
		return new PageImpl<>(list, pageable, count);
		 
	}
}




